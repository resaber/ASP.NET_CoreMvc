 @model IEnumerable<prjCatCoffe.Models.Member>

@{
    ViewData["Title"] = "List";
}

<h1>會員資料一覽表</h1>


<div class="bar d-flex align-items-center gap-2">
    @using (Html.BeginForm())
    {
        <div class="d-flex align-items-center gap-2 position-relative">
            <label for="txtKeyword">關鍵字</label>

            <div style="position: relative; width: 150px;">
                @Html.TextBox("txtKeyword", null, new
                    {
                        @class = "form-control",
                        autocomplete = "off",
                        @style = "width: 100%;"
                    })

                @* 動態搜尋結果  對應到*@
                <ul id="suggestList"
                    class="list-group position-absolute"
                @* 動態搜尋結果 先不顯示等使用者輸入文字再顯示*@
                    style="z-index: 1000; width: 150px;  top: 100%; left: 0; background-color: white; display: none;">
                </ul>
            </div>
        
           

            <input type="submit" value="查詢" class="btn btn-primary" />
        </div>
    }

    <select id="selectPerson" class="form-control" style="width: 150px;">
        <option selected disabled>請選擇身分</option>
    </select>
</div>

<p>
    <a asp-action="Create">新增會員</a>
</p>

@section Styles{
    <style>
        table th, table td {
            text-align: center; /* 水平置中 */
            vertical-align: middle; /* 垂直置中 */
        }

        th {
            white-space: nowrap;
        }
    </style>
  
  }
         

<table class="table table-hover">
    <thead>
        <tr>
            <th>
                序號
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ImageUrl)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Account)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.Phone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Gender)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
           
            <th>
                @Html.DisplayNameFor(model => model.IsCaterer)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UpdatedAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody id="tbodyData">
        @{
            int count = 0;
            foreach (var item in Model)
            {
                count++;
                <tr>                  
                    <td>
                        @count
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @* 有圖片給設定的圖片沒有的話給預設值 *@
                        <img src="~/images/member_photos//@(string.IsNullOrEmpty(item.ImageUrl) ? "default-user.jpg" : item.ImageUrl)" width="80" height="50" />
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Account)
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.Phone)
                    </td>
                    <td>
                        @item.GenderDisplay
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    
                    <td>
                        @Html.DisplayFor(modelItem => @item.IsCatererDisplay)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedAt)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UpdatedAt)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => @item.StatusDisplay)
                    </td>
                    <td>
                        @Html.ActionLink("編輯", "Edit", "Member", new { id = item.MemberId },null)
                        @Html.ActionLink("刪除", "Delete", "Member", new { id = item.MemberId }, 
                             new { onclick = "return confirm('要刪除這筆會員資料嗎?')" })

                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@section Scripts{
    <script>
        const selPerson = document.querySelector("#selectPerson");
        const tBodyData = document.querySelector("#tbodyData");
        //套用IFFE
        //讀出資料把使用者身分顯示 例如這裡只有會員或是業者 依照Member資料表 is_caterer是 0 會員 或是 1業者顯示在select option//串接資料庫資料表 要想一下怎麼做
        (async () => {
              try {
                //api路徑
                const response = await fetch("/api/MemberApi/GetRoles");
                const datas = await response.json(); //解析拿到JSON
            
                //安全使用避免xss攻擊
                    datas.forEach(role => {
                    const option = document.createElement("option");
                    option.value = role;
                    option.textContent = role; // 安全插入文字
                    selPerson.appendChild(option);

                });
                //把每個元素拆開
 
              }
                //撈不到資料時做出的防護機制
                //也就是說在抓取比如全部 會員 業者身分途中發生錯誤就鎖死
                catch (err) {
                console.error("發生錯誤：", err);
                const errorOption = document.createElement("option");
                errorOption.disabled = true;
                //顯示資料載入失敗，使用者也無法點擊selecta
                errorOption.selected = true;
                errorOption.textContent = "資料載入失敗";

                selPerson.appendChild(errorOption);
              }
            })(); // ✅ 呼叫 IIFE，這是你漏掉的關鍵

            if(selPerson){
                 //顯示下方table更新資料
            selPerson.addEventListener("change", async () => {
             console.log("🔥 change 事件觸發，選到的身分是：", selPerson.value);
              //去拿option 裡面的Value屬性的值
              const selectedRole = selPerson.value;

              try {

                const response = await fetch(`/api/MemberApi/GetMembersByRole?role=${selectedRole}`);
                console.log("⚡ 正在呼叫 API：", `/api/MemberApi/GetMembersByRole?role=${selectedRole}`);
                const members = await response.json();
                console.log("📦 取得會員資料：", members);
                renderTable(members);//用method 支撐渲染邏輯
              } 
              catch (err) {
                console.error("讀取會員清單失敗", err);
                }
            });
         }
      

         //動態搜尋結果
         const txtKeyWord  = document.querySelector('#txtKeyword');
         const suggestList = document.querySelector("#suggestList");
         //使用者輸入文字時 不為空
         if(txtKeyword){
             //每當輸入有更動時 包含打字 刪除
             txtKeyWord.addEventListener("input",async()=>{
                 //把空白鍵去除 避免觸發 搜尋功能
                 const keyword = txtKeyword.value.trim();

                 //如果關鍵字長度是0 suggestList依然不顯示
                if (keyword.length === 0) {
                  suggestList.innerHTML = "";
                  suggestList.style.display = "none";
                  console.log("打空白字元或是沒輸入東西 不會出現1");
                  return;
                  console.log("Test 確實返回，不會出現2");

                 }

                 //fetch API
                 try{
                     //encodeURIComponent 把中文字或特殊符號也能到後端做查詢
                     const response = await fetch(`/api/MemberApi/SearchMembers?keyword=${encodeURIComponent(keyword)}`);
                     const members = await response.json(); //把回傳的會員資料Promise 做解析JSON 轉成JS物件陣列做操作
                     console.log("動態搜尋取得的 members：", members); // ← 這裡加上 log
                    // 清空舊內容 沒有對應的會員則仍然不用顯示 return nothing
                    suggestList.innerHTML = "";


                    if (members.length === 0) {
                        suggestList.style.display = "none";
                        return;
                    }

                    // 每筆會員建立li 標籤 做顯示
                    members.forEach(m => {
                        const li = document.createElement("li");
                        li.className = "list-group-item list-group-item-action";
                        li.textContent = m.name;

                        li.addEventListener('click', () =>{
                            txtKeyWord.value = m.name;
                            suggestList.innerHTML="";
                            suggestList.style.display = 'none';
                            console.log("Test點擊的會員物件：", m);
                            renderTable([m]); // 顯示這個會員的詳細資料

                        });

                        suggestList.appendChild(li);
                        //渲染members
                        renderTable(members);
                    });
                    suggestList.style.display = "block";
                    
                 }catch(err){
                 }
             });
         }
         //根據關鍵字載入資料表
        function renderTable(members) {
            // 渲染邏輯
            
              tBodyData.innerHTML = ""; //清空所有tbody 內容


              //正式放資料
              let count = 1;

            members.forEach(m => {
                const tr = document.createElement("tr");

                const tdCount = document.createElement("td");
                tdCount.textContent = count++;

                const tdName = document.createElement("td");
                tdName.textContent = m.name;

                const tdImg = document.createElement("td");
                const img = document.createElement("img");
                img.src = `/images/member_photos/${m.imageUrl || 'default-user.jpg'}`;
                img.width = 80;
                img.height = 50;
                tdImg.appendChild(img);

                const tdAccount = document.createElement("td");
                tdAccount.textContent = m.account;

                const tdPhone = document.createElement("td");
                tdPhone.textContent = m.phone;

                const tdGender = document.createElement("td");
                tdGender.textContent = m.gender === 1 ? '女' : '男';

                const tdEmail = document.createElement("td");
                tdEmail.textContent = m.email;

                const tdRole = document.createElement("td");
                tdRole.textContent = m.isCaterer === true ? '業者' : '會員';

                const tdCreatedAt = document.createElement("td");
                tdCreatedAt.textContent = m.createdAt;

                const tdUpdatedAt = document.createElement("td");
                tdUpdatedAt.textContent = m.updatedAt;

                const tdStatus = document.createElement("td");
                tdStatus.textContent = m.status === true ? '啟用' : '停用';

                const tdActions = document.createElement("td");
                const editLink = document.createElement("a");
                editLink.href = `/Member/Edit/${m.memberId}`;
                editLink.textContent = "編輯";

                const deleteLink = document.createElement("a");
                deleteLink.href = `/Member/Delete/${m.memberId}`;
                deleteLink.textContent = "刪除";
                deleteLink.onclick = () => confirm("要刪除這筆會員資料嗎?");

                tdActions.appendChild(editLink);
                tdActions.appendChild(document.createTextNode(" "));
                tdActions.appendChild(deleteLink);

                tr.append(
                tdCount, tdName, tdImg, tdAccount, tdPhone,
                tdGender, tdEmail, tdRole, tdCreatedAt,
                tdUpdatedAt, tdStatus, tdActions
                );

                tBodyData.appendChild(tr);
            });

        }

        // ✅ 點擊輸入框或建議清單以外的地方時，隱藏建議清單（不重載資料表）
        document.addEventListener('click', function (e) {
            const isInsideInput = txtKeyWord && txtKeyWord.contains(e.target);
            const isInsideSuggestList = suggestList && suggestList.contains(e.target);

            if (!isInsideInput && !isInsideSuggestList) {
                suggestList.style.display = 'none';
            }
        });
    </script>
}